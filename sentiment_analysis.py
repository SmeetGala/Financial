# -*- coding: utf-8 -*-
"""Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DWz-kxQrl0504HRFymX0rOE7m0PyDR_v
"""

# Import the libraries

import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

access_token ="806070223715581952-9McJuXQnk3I59ZI3W3OVbVV9bOGjFk1"
acc_token_secret= "5uCbPFOKaR6hwho1pJne313x4Hz2kC3ZaDbZKuN52ay2b"

api_key= "BusTsBcyc0WxmSSP4TRWTfLqJ"
api_sec_key="vhqnribIf5bImeXnwQQoNkF4qTwPVlYkrl1xYDogzwGLF6LIba"

auth = tweepy.OAuthHandler(api_key, api_sec_key)
auth.set_access_token(access_token, acc_token_secret)
api = tweepy.API(auth)

print('Logged in Successfully')

# Fetch tweets

search_words = ["#reliance", "RIL"]
date_since = "2020-09-11"

posts = api.search(
              q=search_words,
              lang="en",
              since=date_since,
              count= 100000
              )
i=1
for tweet in posts:
  
  print(str(i) + ')'+ tweet.text + '\n')
  i= i+1

# Creating a dataframe with a column called Tweets

df = pd.DataFrame( [tweet.text for tweet in posts], columns = ['Tweets'])

# Show the first 5 rows of the data

df.head()

# Clean the text

# Create a function to clean the tweets

def clean_tweets(text):
  
  text = re.sub(r'@[A-Za-z0-9]+' , '', text) #Removes @mentions
  text = re.sub(r'#', '', text)               #Removes '#' symbol
  text = re.sub(r'RT[\s]+', '', text)         #Removes 'RT' or retweets
  text = re.sub(r'https?:\/\/\S+', '', text)  #Removes hyperlinks

  return text

# Cleaning the text
df['Tweets'] = df['Tweets'].apply(clean_tweets)

# Show the clean texts

df

# Creating a function to get the subjectivity

def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity

# Creating a function to get the polarity

def getPolarity(text):
  return TextBlob(text).sentiment.polarity

df['Subjectivity'] = df['Tweets'].apply(getSubjectivity)
df['Polarity']     = df['Tweets'].apply(getPolarity)

df

# Plot the Word Cloud

allWords  = ' '.join( [twts for twts in df['Tweets']])
wordCloud = WordCloud(width = 500, height = 300, random_state = 21, max_font_size = 119).generate(allWords)

plt.imshow(wordCloud, interpolation = "bilinear")
plt.axis = 'Off'
plt.show()

# Create a function to compute negative, neutral and positive analysis

def getAnalysis(score):

  if score < 0:
    return 'Negative'

  elif score == 0:
    return 'Neutral'

  else:
    return 'Positive'

df['Analysis'] = df['Polarity'].apply(getAnalysis)

# Show the dataframe

df

# Print all of the positive tweets

j = 1
sortedDf = df.sort_values(by=['Polarity'])
for i in range (0, sortedDf.shape[0]):
  if (sortedDf['Analysis'][i] == 'Positive'):
    print(str(j) + ') ' + sortedDf['Tweets'][i])
    print()
    j = j+1

# Print all of the negative tweets

j = 1
sortedDf = df.sort_values(by=['Polarity'], ascending= 'False')
for i in range (0, sortedDf.shape[0]):
  if (sortedDf['Analysis'][i] == 'Negative'):
    print(str(j) + ') ' + sortedDf['Tweets'][i])
    print()
    j = j+1

# Plot the Subjectivity and Polarity

plt.figure(figsize = (8,6))

plt.scatter(df['Polarity'], df['Subjectivity'], color = 'Blue')

plt.title('Sentiment Analysis')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

# Get the percentage of positive tweets

ptweets = df[df.Analysis=='Positive']
ptweets = ptweets['Tweets']

round (ptweets.shape[0] / df.shape[0],1) * 100

# Get the percentage of negative tweets

ntweets = df[df.Analysis=='Negative']

ntweets = ntweets['Tweets']

round (ntweets.shape[0] / df.shape[0],1) * 100

# Show the value counts

df['Analysis'].value_counts()

# Plot and visualize the counts

plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')

df['Analysis'].value_counts().plot(kind='bar')
plt.show()